Part 1. Terminology
In your own terms, define the following terms:

What is HTTP? 
Hypertext Transfer Protocol (how browsers and servers communicate)

What is a URL? 
Uniform Resource Locator

What is DNS? 
Domain Name Service

What is a query string? 
A part of the URL that adds extra information which is provided to the server

What are two HTTP verbs and how are they different?
- GET: does not change server data
- POST: changes server data

What is an HTTP request? 
Pointing a browser client to a webpage address makes a request to the server.

What is an HTTP response? 
In response to a request, the browser returns the HTML code of the page.

What is an HTTP header? Give a couple examples of request and response headers you have seen.
An header is extra information clients and servers pass to each other.
Request headers: Date, language
Response headers: Content type, caching info

What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?

1. Browser checks cache for DNS entry to find the corresponding IP address of website
2. If not found in cache, ISP’s (Internet Service Provider) DNS server initiates a DNS query to find IP address of server that hosts the domain name.
3. Browser initiates a TCP (Transfer Control Protocol) connection with the server using synchronize(SYN) and acknowledge(ACK) messages.
4. Browser sends an HTTP request to the web server. GET or POST request.
5. Server on the host computer handles that request and sends back a response. It assembles a response in some format like JSON, XML and HTML.
6. Server sends out an HTTP response along with the status of response.
7. Browser displays HTML content

Part Two: Practice tools

1. Using curl, make a **_GET_** request to the *icanhazdadjoke.com* API to find all jokes involving the word “pirate”
curl -H "Accept: application/json" "https://icanhazdadjoke.com/search?term=hipster"

2. Use dig to find what the IP address is for *icanhazdadjoke.com*
dig icanhazdadjoke.com

3. Make a simple web page and serve it using python3 -m http.server. Visit the page in a browser.
python3 -m http.server

## **Part Three: Explore Dev Tools**

Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.

## **Part Four: Explore the URL API**

At times, it’s useful for your JavaScript to look at the URL of the browser window and change how the script works depending on parts of that (particularly the query string).

[Read about the URL API](https://developer.mozilla.org/en-US/docs/Web/API/URL)

Try some of the code examples in the Chrome Console so that you can get comfortable with the basic methods and properties for instances of the URL class.
